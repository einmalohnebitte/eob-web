name: Chromatic message

on:
  issue_comment:
    types:
    - created

jobs:
  chromatic-comment:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/chromatic'}}
    steps:   
    - name: Like comment
      uses: actions/github-script@v6
      with:
        script: |
          const {owner, repo} = context.issue
          github.rest.reactions.createForIssueComment({
            owner,
            repo,
            comment_id: context.payload.comment.id,
            content: "+1",
          });  
    - name: Get PR SHA
      id: sha
      uses: actions/github-script@v6
      with:
        result-encoding: string
        script: |
          const { owner, repo, number } = context.issue;
          const pr = await github.rest.pulls.get({
            owner,
            repo,
            pull_number: number,
          });
          return pr.data.head.sha   
    - name: POST new status to the Github API (pending)
      run: |
          echo "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
          curl -L -X POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.sha.outputs.result }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "state": "pending",
            "context": "Chromatic",
            "description": "Waiting Chromatic to run...",
            "target_url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            }'    
    - uses: actions/checkout@v2
      with:
          ref: ${{ steps.sha.outputs.result }}
          fetch-depth: 0
    - uses: actions/cache@v2
      with:
        path: '**/node_modules'
        key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
    - run: yarn
    
    - name: Chromatic
      id: chr
      run: | 
        yarn chromatic > chromatic.log
        BUILD_URL=$(cat chromatic.log | sed -n 's#.*View build details at \(.*\)#\1#p' | head -n 1)
        STORYBOOK_URL=$(cat chromatic.log | sed -n 's#.*View your Storybook at \(.*\)#\1#p' | head -n 1)
        ERROR_URL=$(cat chromatic.log | sed -n 's#.*visual changes: Review the changes at \(.*\)#\1#p' | head -n 1)
        echo "::set-output name=target_url::$STORYBOOK_URL"
        echo "::set-output name=log_url::$BUILD_URL"
        echo "::set-output name=error_url::$ERROR_URL"
        if [["$ERROR_URL"]] ; then exit 1; fi
    - name: POST new status to the Github API (success)
      run: |
          echo "${{steps.chr.outputs.target_url}} - ${{steps.chr.outputs.log_url}}"
          curl -L -X POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.sha.outputs.result }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "state": "success",
            "context": "Chromatic",
            "description": "Chromatic succeded âœ…",
            "target_url":"${{steps.chr.outputs.log_url}}"
            }' 
    - name: POST new status to the Github API (failure)
      if: ${{ failure() }}
      run: |
          curl -L -X POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ steps.sha.outputs.result }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "state": "failure",
            "context": "Chromatic",
            "description": "Chromatic failed",
            "target_url":"https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
            }' 
